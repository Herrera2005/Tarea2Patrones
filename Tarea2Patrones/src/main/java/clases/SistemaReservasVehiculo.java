package clases;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import claseVehiculo.Vehiculo;
import claseVehiculo.VehiculoDeLujo;
import claseVehiculo.VehiculoEconomico;
import claseVehiculo.VehiculoEjecutivo;

public class SistemaReservasVehiculo {
    private List<Vehiculo> vehiculos = new ArrayList<>();



    public SistemaReservasVehiculo() {
        this.vehiculos = new ArrayList<>();
        // Se podr√≠an agregar veh√≠culos manualmente aqu√≠
        vehiculos.add(new VehiculoDeLujo(1, "DeLujo", "Proveedor A", true));
        vehiculos.add(new VehiculoEconomico(2, "Economico", "Proveedor B", true));
        vehiculos.add(new VehiculoEjecutivo(3, "Ejecutivo", "Proveedor C", true));

    }


    private void mostrarVehiculosDisponibles(){
        for (Vehiculo vehiculo : vehiculos) {
            if(vehiculo.verificarDisponibilidad())
            System.out.println(vehiculo);
        }
    }



public static Vehiculo buscarVehiculoPorIDConLoop(List<Vehiculo> vehiculos) {
    Scanner scanner = new Scanner(System.in);
    Vehiculo encontrado = null;

    while (encontrado == null) {
        System.out.print("üîç Ingrese el ID del veh√≠culo que desea buscar: ");

        // Verificar que el usuario ingrese un n√∫mero v√°lido
        if (scanner.hasNextInt()) {
            int id = scanner.nextInt();

            // Buscar el veh√≠culo en la lista
            for (Vehiculo vehiculo : vehiculos) {
                if (vehiculo.getIdVehiculo() == id) {
                    encontrado = vehiculo;
                    break; // Salir del bucle una vez encontrado
                }
            }

            if (encontrado == null) {
                System.out.println("‚ùå No se encontr√≥ ning√∫n veh√≠culo con ese ID. Intente de nuevo.");
            }
        } else {
            System.out.println("‚ö†Ô∏è Entrada inv√°lida. Por favor ingrese un n√∫mero.");
            scanner.next(); // Consumir la entrada inv√°lida para evitar un bucle infinito
        }
    }

    return encontrado;
}

public void menuReservas() {
    Scanner scanner = new Scanner(System.in);
    boolean salir = false;

    while (!salir) {
        System.out.println("\n===== üìã MEN√ö DE RESERVAS =====");
        System.out.println("1Ô∏è‚É£ Mostrar veh√≠culos disponibles");
        System.out.println("2Ô∏è‚É£ Reservar un veh√≠culo");
        System.out.println("3Ô∏è‚É£ Salir");
        System.out.print("Seleccione una opci√≥n: ");

        if (scanner.hasNextInt()) {
            int opcion = scanner.nextInt();
            switch (opcion) {
                case 1:
                    mostrarVehiculosDisponibles();
                    break;
                case 2:
                    mostrarVehiculosDisponibles();
                    Vehiculo vehiculo = buscarVehiculoPorIDConLoop(vehiculos);
                    System.out.println("\n‚úÖ Reservando veh√≠culo: " + vehiculo);
                    vehiculo.confirmarVehiculo(); // Llama al m√©todo abstracto para confirmar la reserva
                    break;
                case 3:
                    System.out.println("üëã Saliendo del sistema...");
                    salir = true;
                    break;
                default:
                    System.out.println("‚ö†Ô∏è Opci√≥n inv√°lida. Intente nuevamente.");
            }
        } else {
            System.out.println("‚ö†Ô∏è Entrada inv√°lida. Por favor ingrese un n√∫mero.");
            scanner.next();
        }
    }
}


public List<Vehiculo> getVehiculos() {
    return vehiculos;
}


public void setVehiculos(List<Vehiculo> vehiculos) {
    this.vehiculos = vehiculos;
}

}
